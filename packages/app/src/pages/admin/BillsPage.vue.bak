<template>
  <resource-page>
    <template #header>
      {{ lang.bill.title }}
    </template>
    <template #header-side>
      <q-btn icon="search" rounded>
        <q-menu>
          <div class="q-pa-sm">
            <company-select
              v-model="companyId"
              :filtered-options="filteredCompanies"
              clearable
              @filter="onFilterCompanies"
            />
            <client-select
              v-model="clientId"
              :filtered-options="filteredClients"
              clearable
              @filter="onFilterClients"
            />
            <!-- <invoice-status-select v-model="status" /> -->
          </div>
        </q-menu>
      </q-btn>
    </template>
    <div class="row" v-if="ready">
      <q-list class="full-width" dense>
        <invoice-expansion-item
          v-for="invoice in invoices"
          :key="invoice.id"
          :model-value="invoice"
          @update="openUpdateDialog"
          @markPaid="markPaid"
        />
      </q-list>
    </div>
  </resource-page>
</template>

<script lang="ts">
export default {
  name: 'AdminBillsPage'
}
</script>

<script setup lang="ts">
import { ref, nextTick, onMounted, reactive } from 'vue'
import { createUseTrpc } from '../../trpc.js'
import { ResourcePage, ResponsiveDialog } from '@simsustech/quasar-components'
import { EmailInput } from '@simsustech/quasar-components/form'
import InvoiceForm from '../../components/invoice/InvoiceForm.vue'
import InvoiceExpansionItem from '../../components/invoice/InvoiceExpansionItem.vue'
import { useLang } from '../../lang/index.js'
import {
  type CompanyDetails,
  type ClientDetails
} from '@modular-api/fastify-checkout'
import { useQuasar } from 'quasar'
import CompanySelect from '../../components/company/CompanySelect.vue'
import ClientSelect from '../../components/client/ClientSelect.vue'
import { InvoiceStatus } from '@slimfact/api/zod'

const { useQuery, useMutation } = await createUseTrpc()

const $q = useQuasar()
const lang = useLang()

const companyId = ref(NaN)
const clientId = ref(NaN)
const status = ref<InvoiceStatus>(InvoiceStatus.BILL)

const { data: invoices, execute } = useQuery('admin.getInvoices', {
  args: reactive({
    companyId,
    clientId,
    status
  })
  // immediate: true
})

const updateInvoiceFormRef = ref<typeof InvoiceForm>()
const updateDialogRef = ref<typeof ResponsiveDialog>()

const openUpdateDialog: InstanceType<
  typeof ResourcePage
>['$props']['onUpdate'] = ({ data }) => {
  updateDialogRef.value?.functions.open()
  nextTick(() => {
    updateInvoiceFormRef.value?.functions.setValue(data)
  })
}

const filteredCompanies = ref<CompanyDetails[]>([])
const onFilterCompanies: InstanceType<
  typeof InvoiceForm
>['$props']['onFilter:companies'] = async ({ searchPhrase, done }) => {
  const result = useQuery('admin.searchCompanies', {
    args: searchPhrase,
    immediate: true
  })

  await result.immediatePromise

  if (result.data.value) filteredCompanies.value = result.data.value

  if (done) done()
}

const filteredClients = ref<ClientDetails>([])
const onFilterClients: InstanceType<
  typeof InvoiceForm
>['$props']['onFilter:clients'] = async ({ searchPhrase, done }) => {
  const result = useQuery('admin.searchClients', {
    args: { name: searchPhrase },
    immediate: true
  })

  await result.immediatePromise

  if (result.data.value) filteredClients.value = result.data.value

  if (done) done()
}

const markPaid: InstanceType<
  typeof InvoiceExpansionItem
>['$props']['onMarkPaid'] = async ({ data, done }) => {
  const format = (value: number) =>
    Intl.NumberFormat(data.locale, {
      maximumFractionDigits: 2,
      style: 'currency',
      currency: data.currency
    }).format(value / 100)

  $q.dialog({
    message: lang.value.bill.messages.markPaid({
      clientDetails: data.clientDetails,
      totalIncludingTax: format(data.totalIncludingTax)
    })
  }).onOk(async () => {
    const result = useMutation('admin.setInvoiceStatus', {
      args: { id: data.id, status: InvoiceStatus.RECEIPT },
      immediate: true
    })

    await result.immediatePromise

    if (!result.error.value) await execute()

    done(!result.error.value)
  })
}

const ready = ref<boolean>(false)
onMounted(async () => {
  await execute()
  ready.value = true
})
</script>
